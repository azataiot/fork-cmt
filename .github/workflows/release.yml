name: Release

on:
  push:
    tags:
      - 'v[0-9]+*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: cmt

jobs:
  build-and-release:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: cmt-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: cmt-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: cmt-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            asset_name: cmt-darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: cmt-windows-amd64.exe

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          configurationJson: |
            {
              "template": "# Changelog\n\n#{{CHANGELOG}}\n\n<details>\n<summary>Uncategorized</summary>\n\n#{{UNCATEGORIZED}}\n</details>",
              "categories": [
                { "title": "## üöÄ Features", "labels": ["feature", "enhancement"] },
                { "title": "## üêõ Bug Fixes", "labels": ["bug", "fix"] },
                { "title": "## üì¶ Dependencies", "labels": ["dependencies"] }
              ]
            }

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: contains(matrix.target, 'aarch64-unknown-linux-gnu')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare asset
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe ${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} ${{ matrix.asset_name }}
          fi

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.build_changelog.outputs.changelog }}
          generate_release_notes: false
          files: ${{ matrix.asset_name }}
          draft: false
          prerelease: false
